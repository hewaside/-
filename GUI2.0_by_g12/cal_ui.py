# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'cal_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QDoubleValidator
import matlab
import matlab.engine
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1360, 842)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(680, 340, 91, 29))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("/********************QPushButton样式**********************/\n"
"QPushButton {\n"
"    border: 2px solid #8f8f91;         /* 设置边框粗细、样式、颜色*/\n"
"    border-radius: 6px;                /* 设置边框圆角 */\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #f6f7fa, stop: 1 #dadbde);\n"
"    min-width: 80px;                   /* 设置按键的最小宽度 */\n"
"    min-height: 25px;\n"
"}\n"
"\n"
"QPushButton:pressed{                   /* 设置按键按下样式 */\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
"}\n"
"\n"
"QPushButton:flat {\n"
"    border: none; /* no border for a flat push button */\n"
"}\n"
"\n"
"QPushButton:default {                 /* 设置默认按键样式 */\n"
"    border-color: rgb(85, 170, 255);\n"
"}\n"
"\n"
"QPushButton:open {                    /* 设置菜单打开时button样式*/\n"
"    background - color:qlineargradient(x1: 0 , y1: 0 , x2: 0 , y2: 1 ,\n"
"                                  stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
"}\n"
"\n"
"QPushButton::menu-indicator {          /* 设置下拉箭头 */\n"
"    subcontrol-origin: content;        /* 父控件内子控件的原点矩形。是QSS独有的属性。值为父控件的盒子模式的区域 */\n"
"    subcontrol-position: center right; /* 设置下拉箭头显示位置为水平方向上靠右，垂直方向居中*/\n"
"}\n"
"\n"
"QPushButton::menu-indicator:pressed,\n"
"QPushButton::menu-indicator:open {\n"
"    position: relative;                /* 指定了元素的定位类型*/\n"
"    top: 1px; left: 2px;               /* 设置在点击按键、打开菜单时偏移下拉箭头*/\n"
"}\n"
"\n"
"")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(870, 340, 84, 29))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(10)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("/********************QPushButton样式**********************/\n"
"QPushButton {\n"
"    border: 2px solid #8f8f91;         /* 设置边框粗细、样式、颜色*/\n"
"    border-radius: 6px;                /* 设置边框圆角 */\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #f6f7fa, stop: 1 #dadbde);\n"
"    min-width: 80px;                   /* 设置按键的最小宽度 */\n"
"    min-height: 25px;\n"
"}\n"
"\n"
"QPushButton:pressed{                   /* 设置按键按下样式 */\n"
"    background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                      stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
"}\n"
"\n"
"QPushButton:flat {\n"
"    border: none; /* no border for a flat push button */\n"
"}\n"
"\n"
"QPushButton:default {                 /* 设置默认按键样式 */\n"
"    border-color: rgb(85, 170, 255);\n"
"}\n"
"\n"
"QPushButton:open {                    /* 设置菜单打开时button样式*/\n"
"    background - color:qlineargradient(x1: 0 , y1: 0 , x2: 0 , y2: 1 ,\n"
"                                  stop: 0 #dadbde, stop: 1 #f6f7fa);\n"
"}\n"
"\n"
"QPushButton::menu-indicator {          /* 设置下拉箭头 */\n"
"    subcontrol-origin: content;        /* 父控件内子控件的原点矩形。是QSS独有的属性。值为父控件的盒子模式的区域 */\n"
"    subcontrol-position: center right; /* 设置下拉箭头显示位置为水平方向上靠右，垂直方向居中*/\n"
"}\n"
"\n"
"QPushButton::menu-indicator:pressed,\n"
"QPushButton::menu-indicator:open {\n"
"    position: relative;                /* 指定了元素的定位类型*/\n"
"    top: 1px; left: 2px;               /* 设置在点击按键、打开菜单时偏移下拉箭头*/\n"
"}\n"
"\n"
"")
        self.pushButton_2.setObjectName("pushButton_2")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(650, 110, 391, 201))
        self.widget.setStyleSheet("")
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(22)
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setStyleSheet("QLabel\n"
"{\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(0,0, 0);\n"
"}\n"
"")
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(self.widget)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("/********************QComboBox样式**********************/\n"
"QComboBox {\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"    padding: 1px 18px 1px 3px;         /* 设置元素边框与元素内容之间的上右下左的内边距 */\n"
"    min-width: 6em;\n"
"}\n"
"\n"
"QComboBox:editable {                   /* 设置可编辑的样式*/\n"
"    background-color: white;\n"
"}\n"
"\n"
"QComboBox:!editable,                   /* QComboBox不可编辑状态*/\n"
"QComboBox::drop-down:editable {        /* 下拉箭头按键区域可编辑状态*/\n"
"     background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                 stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,\n"
"                                 stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);\n"
"}\n"
"\n"
"QComboBox:!editable:on, QComboBox::drop-down:editable:on {      /* 当弹出窗口打开时，QComboBox获取“打开”状态(打开下拉框状态)*/\n"
"    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                stop: 0 #D3D3D3, stop: 0.4 #D8D8D8,\n"
"                                stop: 0.5 #DDDDDD, stop: 1.0 #E1E1E1);\n"
"}\n"
"\n"
"QComboBox:on {       /* 弹出下拉框窗口时移动文本*/\n"
"    padding-top: 3px;\n"
"    padding-left: 6px;\n"
"}\n"
"\n"
"QComboBox::drop-down {                   /* 设置下拉按键*/\n"
"    subcontrol-origin: padding;          /* 设置按键在QComboBox盒子模型中的参考位置margin border padding content*/\n"
"    subcontrol-position: top right;      /* 设置按键位置靠上靠右*/\n"
"    background-color: rgb(245, 245, 245);\n"
"    width: 20px;\n"
"\n"
"    border-left-width: 2px;              /* 设置下拉按键左边框宽度*/\n"
"    border-left-color: rgb(0, 255, 0);   /* 左边框颜色*/\n"
"    border-left-style: solid;\n"
"    border-top-right-radius: 3px;        /* 设置边框圆角*/\n"
"    border-bottom-right-radius: 3px;\n"
"}\n"
"\n"
"QComboBox::down-arrow {                  /* 设置下拉箭头*/\n"
"    image: url(:/image/下.png);\n"
"}\n"
"\n"
"QComboBox::down-arrow:on {               /* 打开下拉框时移动下拉箭头*/\n"
"    top: 1px;\n"
"    left: 1px;\n"
"}\n"
"\n"
"QComboBox QAbstractItemView {\n"
"    border: 2px solid rgb(0, 255, 0);      /* 设置下拉列表边框*/\n"
"    selection-background-color: lightgray; /* 设置下拉列表选择项的背景色*/\n"
"}\n"
"\n"
"")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout.addWidget(self.comboBox)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_2 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_4.addWidget(self.label_2)
        self.label_3 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_2.setStyleSheet("QLineEdit\n"
"{\n"
"    border: 1px solid gray; /* 边框 */\n"
"    border-radius: 4px;     /* 边框圆角 */\n"
"    padding: 0 8px;         /* 内容与边框距离 */\n"
"    background: white;      /* 背景颜色 */\n"
"    selection-background-color: darkgray; /*所选内容的背景颜色*/\n"
"}\n"
"")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_3.addWidget(self.lineEdit_2)
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setStyleSheet("QLineEdit\n"
"{\n"
"    border: 1px solid gray; /* 边框 */\n"
"    border-radius: 4px;     /* 边框圆角 */\n"
"    padding: 0 8px;         /* 内容与边框距离 */\n"
"    background: white;      /* 背景颜色 */\n"
"    selection-background-color: darkgray; /*所选内容的背景颜色*/\n"
"}\n"
"")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setEnabled(0);
        self.horizontalLayout_3.addWidget(self.lineEdit)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.widget1 = QtWidgets.QWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(-20, -10, 1391, 831))
        self.widget1.setStyleSheet("background-image: url(:/lay/cqu2.jpg);\n"
"background-position: center center;\n"
"/* 背景图不平铺 */\n"
"background-repeat: no-repeat;\n"
"/* 当内容高度大于图片高度时，背景图像的位置相对于viewport固定 */\n"
"background-attachment: fixed;\n"
"/* 让背景图基于容器大小伸缩 */\n"
"background-size: cover;\n"
"height:200%;\n"
"width:200%;")
        self.widget1.setObjectName("widget1")
        self.widget.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1360, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton.clicked.connect(self.clickButton1)
        self.pushButton_2.clicked.connect(self.clickButton2)
        self.comboBox.currentTextChanged.connect(self.comboBox_changed)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "计算正弦值"))
        self.pushButton_2.setText(_translate("MainWindow", "计算余弦值"))
        self.label.setText(_translate("MainWindow", "计算类型"))
        self.comboBox.setItemText(0, _translate("MainWindow", "三角函数"))
        self.comboBox.setItemText(1, _translate("MainWindow", "反三角函数"))
        self.label_2.setText(_translate("MainWindow", "请输入角度"))
        self.label_3.setText(_translate("MainWindow", "计算结果"))

    def comboBox_changed(self):
        if self.comboBox.currentIndex() == 1:
            self.label_2.setText("请输入数值")
            self.pushButton.setText("计算反正弦值")
            self.pushButton_2.setText("计算反余弦值")
            validator = QDoubleValidator()
            validator.setRange(-1, 1.0, 3)
            validator.setNotation(QDoubleValidator.StandardNotation)

            self.lineEdit_2.setValidator(validator)  # 替换成您的LineEdit的名称

        if self.comboBox.currentIndex() == 0:
            self.label_2.setText("请输入角度")
            validator = QDoubleValidator()
            validator.setRange(-180, 180, 2)
            validator.setDecimals(2)  # 设置小数位数为2
            self.lineEdit_2.setValidator(validator)  # 替换成您的LineEdit的名称
            self.pushButton.setText("计算正弦值")
            self.pushButton_2.setText("计算余弦值")


    def clickButton1(self):
        # 启动MATLAB引擎

        eng = matlab.engine.start_matlab()
        # 读取文本
        input1 = float(self.lineEdit_2.text())
        if self.comboBox.currentIndex() == 0:
            sind = input1 / 180 * 3.1415926;
            result = eng.calculateSin(sind)
            result_text = str(result)
            print(result_text)
            self.lineEdit.setText(result_text)
        elif self.comboBox.currentIndex() == 1:
            result = eng.calculateArcsin(input1)
            result_d = round(result / 3.1415926 * 180, 2)
            result_text = str(result_d) + "°"
            print(result_text)
            self.lineEdit.setText(result_text)


    def clickButton2(self):
        # 启动MATLAB引擎
        eng = matlab.engine.start_matlab()
        # 读取文本
        input2 = float(self.lineEdit_2.text())
        if self.comboBox.currentIndex() == 0:
            cosd = input2 / 180 * 3.1415926;
            result = eng.calculateCos(cosd)
            result_text = str(result)
            print(result_text)
            self.lineEdit.setText(result_text)

        elif self.comboBox.currentIndex() == 1:
            result = eng.calculateArccos(input2)
            result_d = round(result / 3.1415926 * 180, 2)
            result_text = str(result_d) + "°"
            print(result_text)
            self.lineEdit.setText(result_text)
import aaa_rc


