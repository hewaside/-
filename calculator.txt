function [s, c, a, t] = myTrigFunctions(deg)
    % 将角度转换为弧度
    rad = deg * pi / 180;

    % 计算sin
    n_terms_sin = 10;
    s = 0;
    for i = 1:n_terms_sin
        sign_sin = (-1)^(i+1);
        fact_sin = factorial(2*i-1);
        s = s + sign_sin * rad^(2*i-1) / fact_sin;
    end
    s = round(s * 100) / 100; % 保留两位小数

    % 计算cos
    n_terms_cos = 10;
    c = 1;
    for i = 1:n_terms_cos
        fact_cos = factorial(2*i);
        c = c - (rad^(2*i) / fact_cos);
    end
    c = round(c * 100) / 100; % 保留两位小数

    % 计算arcsin（此实现仅适用于-1 <= x <= 1的小范围近似计算，精度有限）
    x = s;
    n_terms_asin = 10;
    a = 0;
    for i = 1:n_terms_asin
        fact_asin = factorial(2*i);
        sign_asin = (-1)^(i);
        a = a + sign_asin * x^(2*i+1) / (2*i+1) / fact_asin;
    end
    a = a * pi / 2;
    a = round(a * 180 / pi * 100) / 100; % 转换回角度并保留两位小数

    % 计算arctan（此实现仅适用于接近零的x值的小范围近似计算，精度有限）
    x = s / c;
    n_terms_atan = 10;
    t = 0;
    for i = 1:n_terms_atan
        fact_atan = factorial(2*i-1);
        sign_atan = (-1)^(i+1);
        t = t + sign_atan * x^(2*i) / (2*i-1) / fact_atan;
    end
    t = t * pi / 2;
    t = round(t * 180 / pi * 100) / 100; % 转换回角度并保留两位小数
end

function main()
    % 请求用户输入角度
    deg = str2double(input('请输入一个角度（以度为单位）：', 's'));

    % 计算并输出四个三角函数值
    [s, c, a, t] = myTrigFunctions(deg);
    fprintf('Sine: %.2f\n', s);
    fprintf('Cosine: %.2f\n', c);
    fprintf('Arcsine: %.2f degrees\n', a);
    fprintf('Arctangent: %.2f degrees\n', t);
end

% 运行主程序
main();